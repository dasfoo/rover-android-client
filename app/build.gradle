apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply from: 'config/quality.gradle'

ext {
    grpcVersion = '1.3.0'
}

android {
    compileSdkVersion 25
    // https://developer.android.com/studio/releases/build-tools.html
    buildToolsVersion '25.0.2'
    testBuildType 'release'
    defaultConfig {
        applicationId 'org.dasfoo.rover.android.client'
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            // To apply Proguard (e.g. to test the configuration), simply copy over
            // minifyEnabled and proguardFiles from "release" build type and add:
            //   debuggable false
        }
        release {
            minifyEnabled true
            // getDefaultProguardFile searches for the files in path-to-android-sdk/tools/proguard/.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    // Have to use flavors instead of buildTypes because testBuildType can only
    // be set to a single buildType, which fortunately can have multiple flavors.
    productFlavors {
        normal {
            //signingConfig signingConfigs.release
        }
        instrumented {
            // A flavor for running instrumented tests.
            signingConfig signingConfigs.debug
            applicationIdSuffix '.instrumented'
            versionNameSuffix '-instrumented'
        }
    }
    variantFilter { variant ->
        if (variant.buildType.name == 'debug') {
            // For "debug" we don't need instrumented flavors, because we want to run instrumented
            // tests with ProGuard.
            variant.ignore = !variant.flavors*.name.contains('normal')
        }
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.2.0'
        //path = '/usr/bin/protoc'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            javalite {
                // TODO(dotdoom): find out why it's not working (not adding
                //                @Generated)
                option 'annotate_code'
            }
            grpc {
                // Options added to --grpc_out
                option 'lite'
            }
        }
    }
}

configurations {
    // guava-jdk5, which is a transitive dependency of google-api-client,
    // contains it's own com.google.common.annotations which conflicts with the
    // one we already have.
    all*.exclude group: 'com.google.guava', module: 'guava-jdk5'

    // These are brought by google-api-client but are not needed on Android.
    all*.exclude group: 'org.apache.httpcomponents'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile 'junit:junit:4.12'
    // According to lint, major version number should match compileSdkVersion.
    compile 'com.android.support:appcompat-v7:25.3.1'

    compile "io.grpc:grpc-okhttp:$grpcVersion"
    compile "io.grpc:grpc-protobuf-lite:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"

    compile 'javax.annotation:javax.annotation-api:1.2'

    compile 'com.google.android.gms:play-services-safetynet:10.2.6'
    compile 'com.google.android.gms:play-services-auth:10.2.6'

    compile 'com.google.api-client:google-api-client-android:1.22.0'
    compile 'com.google.apis:google-api-services-storage:v1-rev92-1.22.0'

    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    compile project(path: ':h264videostream')
}
tasks.withType(JavaCompile) {
    options.compilerArgs += [
            // TODO(dotdoom): make use of annotate_code to ignore issues in @Generated code:
            //                https://github.com/google/protobuf/blob/master/src/google/protobuf/compiler/java/java_generator.cc#L83
            //                https://github.com/google/error-prone/issues/463
            // TODO(dotdoom): enable all checks and promote to Errors in error-prone config:
            //                http://errorprone.info/docs/flags
            '-XepDisableWarningsInGeneratedCode',
            '-XepAllDisabledChecksAsWarnings',
            '-Xep:FallThrough:WARN',
            '-Xep:ConstantField:WARN',
            '-Xep:RemoveUnusedImports:WARN',
            '-Xep:PrivateConstructorForUtilityClass:WARN',
    ]
}
