apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'checkstyle'

checkstyle {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
    toolVersion '7.3'
}

// Have to create our own task because Android's sourceSets:
// https://android.googlesource.com/platform/tools/build/+/master/gradle/src/main/groovy/com/android/build/gradle/internal/api/DefaultAndroidSourceSet.java
// are not compatible with Gradle sourceSets:
// https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/SourceSet.html
// therefore checkstyle initializer doesn't see them.
task checkstyle(type: Checkstyle) {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
    source android.sourceSets.main.getJava().getSrcDirs()
    classpath = files()
    ignoreFailures = false
}

project.afterEvaluate {
    lintDebug.dependsOn 'checkstyle'
}

android {
    compileSdkVersion 24
    // https://developer.android.com/studio/releases/build-tools.html
    buildToolsVersion '24.0.3'
    defaultConfig {
        applicationId 'org.dasfoo.rover.android.client'
        minSdkVersion 21
        targetSdkVersion 24
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            // To apply Proguard (e.g. to test the configuration), simply copy over
            // minifyEnabled and proguardFiles from "release" build type and add:
            //   debuggable false
        }
        release {
            minifyEnabled true
            // getDefaultProguardFile searches for the files in path-to-android-sdk/tools/proguard/.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    lintOptions {
        // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html

        // Enable all warnings, even those disabled by default.
        checkAllWarnings true

        // Generate a text report that might be seen in the CI build log.
        textReport true
        textOutput "stdout"
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.1.0'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.1'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                javanano {
                    // Options added to --javanano_out
                    option 'ignore_services=true'
                }
            }

            task.plugins {
                grpc {
                    // Options added to --grpc_out
                    option 'nano=true'
                    option 'nano'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    // According to lint, major version number should match compileSdkVersion.
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'io.grpc:grpc-okhttp:1.0.1'
    compile 'io.grpc:grpc-protobuf-nano:1.0.1'
    compile 'io.grpc:grpc-stub:1.0.1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.google.android.gms:play-services-safetynet:9.8.0'
    compile project(path: ':h264videostream')
}
