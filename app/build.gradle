apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

checkstyle {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
    toolVersion '7.3'
}

pmd {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
    toolVersion '5.5.2'
}

// Have to create our own tasks because Android's sourceSets:
// https://android.googlesource.com/platform/tools/build/+/master/gradle/src/main/groovy/com/android/build/gradle/internal/api/DefaultAndroidSourceSet.java
// are not compatible with Gradle sourceSets:
// https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/SourceSet.html
// therefore checkstyle/pmd/etc constructors doesn't see them.

// TODO(dotdoom): enable checkstyle and pmd for all Gradle projects

task checkstyle(type: Checkstyle) {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
    source android.sourceSets.main.getJavaDirectories()
    classpath = files()
    ignoreFailures = false
}

task pmd(type: Pmd) {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html
    source android.sourceSets.main.getJavaDirectories()
    classpath = files()
    ignoreFailures = false
    ruleSetFiles = files('config/pmd/ruleset.xml')
    consoleOutput = true
}

project.afterEvaluate {
    tasks.withType(tasks['lint'].class) {
        dependsOn 'checkstyle', 'pmd'
    }
}

android {
    compileSdkVersion 25
    // https://developer.android.com/studio/releases/build-tools.html
    buildToolsVersion '25.0.1'
    testBuildType 'release'
    defaultConfig {
        applicationId 'org.dasfoo.rover.android.client'
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            // To apply Proguard (e.g. to test the configuration), simply copy over
            // minifyEnabled and proguardFiles from "release" build type and add:
            //   debuggable false
        }
        release {
            minifyEnabled true
            // getDefaultProguardFile searches for the files in path-to-android-sdk/tools/proguard/.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    // Have to use flavors instead of buildTypes because testBuildType can only
    // be set to a single buildType, which fortunately can have multiple flavors.
    productFlavors {
        normal {
            //signingConfig signingConfigs.release
        }
        instrumented {
            // A flavor for running instrumented tests.
            signingConfig signingConfigs.debug
            applicationIdSuffix '.instrumented'
            versionNameSuffix '-instrumented'
        }
    }
    variantFilter { variant ->
        if (variant.buildType.name == 'debug') {
            // For "debug" we don't need instrumented flavors, because we want to run instrumented
            // tests with ProGuard.
            variant.ignore = !variant.flavors*.name.contains('normal')
        }
    }
    lintOptions {
        // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html
        // Enable all warnings, even those disabled by default.
        checkAllWarnings true
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.1.0'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.1'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                javanano {
                    // Options added to --javanano_out
                    option 'ignore_services=true'
                }
            }

            task.plugins {
                grpc {
                    // Options added to --grpc_out
                    option 'nano=true'
                    option 'nano'
                }
            }
        }
    }
}

configurations {
    // guava-jdk5, which is a transitive dependency of google-api-client,
    // contains it's own com.google.common.annotations which conflicts with the
    // one we already have.
    all*.exclude group: 'com.google.guava', module: 'guava-jdk5'

    // These are brought by google-api-client but are not needed on Android.
    all*.exclude group: 'org.apache.httpcomponents'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile 'junit:junit:4.12'
    // According to lint, major version number should match compileSdkVersion.
    compile 'com.android.support:appcompat-v7:25.1.1'

    compile 'io.grpc:grpc-okhttp:1.0.3'
    compile 'io.grpc:grpc-protobuf-nano:1.0.3'
    compile 'io.grpc:grpc-stub:1.0.3'

    compile 'javax.annotation:javax.annotation-api:1.2'

    compile 'com.google.android.gms:play-services-safetynet:10.0.1'
    compile 'com.google.android.gms:play-services-auth:10.0.1'

    compile 'com.google.api-client:google-api-client-android:1.22.0'
    compile 'com.google.apis:google-api-services-storage:v1-rev92-1.22.0'

    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    compile project(path: ':h264videostream')
}
